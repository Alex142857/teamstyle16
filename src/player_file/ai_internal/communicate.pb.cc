// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: communicate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "communicate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace teamstyle16 {
namespace communicate {

namespace {

const ::google::protobuf::Descriptor* Position_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Position_reflection_ = NULL;
const ::google::protobuf::Descriptor* Element_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Element_reflection_ = NULL;
const ::google::protobuf::Descriptor* Element_Size_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Element_Size_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_reflection_ = NULL;
const ::google::protobuf::Descriptor* StableInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StableInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoundInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoundInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoundInfo_ProductionEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoundInfo_ProductionEntry_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_communicate_2eproto() {
  protobuf_AddDesc_communicate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "communicate.proto");
  GOOGLE_CHECK(file != NULL);
  Position_descriptor_ = file->message_type(0);
  static const int Position_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, z_),
  };
  Position_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Position_descriptor_,
      Position::default_instance_,
      Position_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Position));
  Element_descriptor_ = file->message_type(1);
  static const int Element_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element, visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element, health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element, fuel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element, ammo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element, metal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element, dest_),
  };
  Element_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Element_descriptor_,
      Element::default_instance_,
      Element_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Element));
  Element_Size_descriptor_ = Element_descriptor_->nested_type(0);
  static const int Element_Size_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element_Size, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element_Size, y_),
  };
  Element_Size_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Element_Size_descriptor_,
      Element_Size::default_instance_,
      Element_Size_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element_Size, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element_Size, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Element_Size));
  Map_descriptor_ = file->message_type(2);
  static const int Map_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, x_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, y_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, terrain_),
  };
  Map_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_descriptor_,
      Map::default_instance_,
      Map_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map));
  StableInfo_descriptor_ = file->message_type(3);
  static const int StableInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StableInfo, map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StableInfo, team_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StableInfo, weather_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StableInfo, population_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StableInfo, round_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StableInfo, time_per_round_),
  };
  StableInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StableInfo_descriptor_,
      StableInfo::default_instance_,
      StableInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StableInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StableInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StableInfo));
  RoundInfo_descriptor_ = file->message_type(4);
  static const int RoundInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoundInfo, round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoundInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoundInfo, population_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoundInfo, element_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoundInfo, production_list_),
  };
  RoundInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoundInfo_descriptor_,
      RoundInfo::default_instance_,
      RoundInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoundInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoundInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoundInfo));
  RoundInfo_ProductionEntry_descriptor_ = RoundInfo_descriptor_->nested_type(0);
  static const int RoundInfo_ProductionEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoundInfo_ProductionEntry, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoundInfo_ProductionEntry, round_left_),
  };
  RoundInfo_ProductionEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoundInfo_ProductionEntry_descriptor_,
      RoundInfo_ProductionEntry::default_instance_,
      RoundInfo_ProductionEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoundInfo_ProductionEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoundInfo_ProductionEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoundInfo_ProductionEntry));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_communicate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Position_descriptor_, &Position::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Element_descriptor_, &Element::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Element_Size_descriptor_, &Element_Size::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_descriptor_, &Map::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StableInfo_descriptor_, &StableInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoundInfo_descriptor_, &RoundInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoundInfo_ProductionEntry_descriptor_, &RoundInfo_ProductionEntry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_communicate_2eproto() {
  delete Position::default_instance_;
  delete Position_reflection_;
  delete Element::default_instance_;
  delete Element_reflection_;
  delete Element_Size::default_instance_;
  delete Element_Size_reflection_;
  delete Map::default_instance_;
  delete Map_reflection_;
  delete StableInfo::default_instance_;
  delete StableInfo_reflection_;
  delete RoundInfo::default_instance_;
  delete RoundInfo_reflection_;
  delete RoundInfo_ProductionEntry::default_instance_;
  delete RoundInfo_ProductionEntry_reflection_;
}

void protobuf_AddDesc_communicate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021communicate.proto\022\027teamstyle16.communi"
    "cate\"+\n\010Position\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 \002(\005\022\t"
    "\n\001z\030\003 \002(\005\"\267\002\n\007Element\022\r\n\005index\030\001 \002(\005\022\014\n\004"
    "type\030\002 \002(\005\022.\n\003pos\030\003 \002(\0132!.teamstyle16.co"
    "mmunicate.Position\0223\n\004size\030\004 \001(\0132%.teams"
    "tyle16.communicate.Element.Size\022\017\n\007visib"
    "le\030\005 \002(\010\022\017\n\004team\030\006 \001(\005:\0012\022\016\n\006health\030\007 \001("
    "\005\022\014\n\004fuel\030\010 \001(\005\022\014\n\004ammo\030\t \001(\005\022\r\n\005metal\030\n"
    " \001(\005\022/\n\004dest\030\013 \001(\0132!.teamstyle16.communi"
    "cate.Position\032\034\n\004Size\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 "
    "\002(\005\"4\n\003Map\022\r\n\005x_max\030\001 \002(\005\022\r\n\005y_max\030\002 \002(\005"
    "\022\017\n\007terrain\030\003 \003(\005\"\241\001\n\nStableInfo\022)\n\003map\030"
    "\001 \002(\0132\034.teamstyle16.communicate.Map\022\020\n\010t"
    "eam_num\030\002 \002(\005\022\017\n\007weather\030\003 \001(\005\022\030\n\020popula"
    "tion_limit\030\004 \001(\005\022\023\n\013round_limit\030\005 \001(\005\022\026\n"
    "\016time_per_round\030\006 \001(\002\"\362\001\n\tRoundInfo\022\r\n\005r"
    "ound\030\001 \002(\005\022\r\n\005score\030\002 \003(\005\022\022\n\npopulation\030"
    "\003 \001(\005\0221\n\007element\030\004 \003(\0132 .teamstyle16.com"
    "municate.Element\022K\n\017production_list\030\005 \003("
    "\01322.teamstyle16.communicate.RoundInfo.Pr"
    "oductionEntry\0323\n\017ProductionEntry\022\014\n\004type"
    "\030\001 \002(\005\022\022\n\nround_left\030\002 \002(\005", 866);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "communicate.proto", &protobuf_RegisterTypes);
  Position::default_instance_ = new Position();
  Element::default_instance_ = new Element();
  Element_Size::default_instance_ = new Element_Size();
  Map::default_instance_ = new Map();
  StableInfo::default_instance_ = new StableInfo();
  RoundInfo::default_instance_ = new RoundInfo();
  RoundInfo_ProductionEntry::default_instance_ = new RoundInfo_ProductionEntry();
  Position::default_instance_->InitAsDefaultInstance();
  Element::default_instance_->InitAsDefaultInstance();
  Element_Size::default_instance_->InitAsDefaultInstance();
  Map::default_instance_->InitAsDefaultInstance();
  StableInfo::default_instance_->InitAsDefaultInstance();
  RoundInfo::default_instance_->InitAsDefaultInstance();
  RoundInfo_ProductionEntry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_communicate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_communicate_2eproto {
  StaticDescriptorInitializer_communicate_2eproto() {
    protobuf_AddDesc_communicate_2eproto();
  }
} static_descriptor_initializer_communicate_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Position::kXFieldNumber;
const int Position::kYFieldNumber;
const int Position::kZFieldNumber;
#endif  // !_MSC_VER

Position::Position()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Position::InitAsDefaultInstance() {
}

Position::Position(const Position& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Position::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Position::~Position() {
  SharedDtor();
}

void Position::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Position::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Position_descriptor_;
}

const Position& Position::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communicate_2eproto();
  return *default_instance_;
}

Position* Position::default_instance_ = NULL;

Position* Position::New() const {
  return new Position;
}

void Position::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_z;
        break;
      }

      // required int32 z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // required int32 z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Position::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // required int32 z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Position::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // required int32 z = 3;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->z());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Position* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Position*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Position::Swap(Position* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Position::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Position_descriptor_;
  metadata.reflection = Position_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Element_Size::kXFieldNumber;
const int Element_Size::kYFieldNumber;
#endif  // !_MSC_VER

Element_Size::Element_Size()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Element_Size::InitAsDefaultInstance() {
}

Element_Size::Element_Size(const Element_Size& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Element_Size::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Element_Size::~Element_Size() {
  SharedDtor();
}

void Element_Size::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Element_Size::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Element_Size::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Element_Size_descriptor_;
}

const Element_Size& Element_Size::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communicate_2eproto();
  return *default_instance_;
}

Element_Size* Element_Size::default_instance_ = NULL;

Element_Size* Element_Size::New() const {
  return new Element_Size;
}

void Element_Size::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Element_Size::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Element_Size::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Element_Size::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Element_Size::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Element_Size::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Element_Size* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Element_Size*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Element_Size::MergeFrom(const Element_Size& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Element_Size::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Element_Size::CopyFrom(const Element_Size& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Element_Size::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Element_Size::Swap(Element_Size* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Element_Size::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Element_Size_descriptor_;
  metadata.reflection = Element_Size_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Element::kIndexFieldNumber;
const int Element::kTypeFieldNumber;
const int Element::kPosFieldNumber;
const int Element::kSizeFieldNumber;
const int Element::kVisibleFieldNumber;
const int Element::kTeamFieldNumber;
const int Element::kHealthFieldNumber;
const int Element::kFuelFieldNumber;
const int Element::kAmmoFieldNumber;
const int Element::kMetalFieldNumber;
const int Element::kDestFieldNumber;
#endif  // !_MSC_VER

Element::Element()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Element::InitAsDefaultInstance() {
  pos_ = const_cast< ::teamstyle16::communicate::Position*>(&::teamstyle16::communicate::Position::default_instance());
  size_ = const_cast< ::teamstyle16::communicate::Element_Size*>(&::teamstyle16::communicate::Element_Size::default_instance());
  dest_ = const_cast< ::teamstyle16::communicate::Position*>(&::teamstyle16::communicate::Position::default_instance());
}

Element::Element(const Element& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Element::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  type_ = 0;
  pos_ = NULL;
  size_ = NULL;
  visible_ = false;
  team_ = 2;
  health_ = 0;
  fuel_ = 0;
  ammo_ = 0;
  metal_ = 0;
  dest_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Element::~Element() {
  SharedDtor();
}

void Element::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete size_;
    delete dest_;
  }
}

void Element::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Element::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Element_descriptor_;
}

const Element& Element::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communicate_2eproto();
  return *default_instance_;
}

Element* Element::default_instance_ = NULL;

Element* Element::New() const {
  return new Element;
}

void Element::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    type_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::teamstyle16::communicate::Position::Clear();
    }
    if (has_size()) {
      if (size_ != NULL) size_->::teamstyle16::communicate::Element_Size::Clear();
    }
    visible_ = false;
    team_ = 2;
    health_ = 0;
    fuel_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ammo_ = 0;
    metal_ = 0;
    if (has_dest()) {
      if (dest_ != NULL) dest_->::teamstyle16::communicate::Position::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Element::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // required .teamstyle16.communicate.Position pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_size;
        break;
      }

      // optional .teamstyle16.communicate.Element.Size size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_visible;
        break;
      }

      // required bool visible = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_team;
        break;
      }

      // optional int32 team = 6 [default = 2];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_health;
        break;
      }

      // optional int32 health = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));
          set_has_health();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fuel;
        break;
      }

      // optional int32 fuel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fuel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fuel_)));
          set_has_fuel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ammo;
        break;
      }

      // optional int32 ammo = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ammo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ammo_)));
          set_has_ammo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_metal;
        break;
      }

      // optional int32 metal = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_metal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &metal_)));
          set_has_metal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_dest;
        break;
      }

      // optional .teamstyle16.communicate.Position dest = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Element::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required .teamstyle16.communicate.Position pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  // optional .teamstyle16.communicate.Element.Size size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->size(), output);
  }

  // required bool visible = 5;
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->visible(), output);
  }

  // optional int32 team = 6 [default = 2];
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->team(), output);
  }

  // optional int32 health = 7;
  if (has_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->health(), output);
  }

  // optional int32 fuel = 8;
  if (has_fuel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->fuel(), output);
  }

  // optional int32 ammo = 9;
  if (has_ammo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->ammo(), output);
  }

  // optional int32 metal = 10;
  if (has_metal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->metal(), output);
  }

  // optional .teamstyle16.communicate.Position dest = 11;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->dest(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Element::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required .teamstyle16.communicate.Position pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  // optional .teamstyle16.communicate.Element.Size size = 4;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->size(), target);
  }

  // required bool visible = 5;
  if (has_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->visible(), target);
  }

  // optional int32 team = 6 [default = 2];
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->team(), target);
  }

  // optional int32 health = 7;
  if (has_health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->health(), target);
  }

  // optional int32 fuel = 8;
  if (has_fuel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->fuel(), target);
  }

  // optional int32 ammo = 9;
  if (has_ammo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->ammo(), target);
  }

  // optional int32 metal = 10;
  if (has_metal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->metal(), target);
  }

  // optional .teamstyle16.communicate.Position dest = 11;
  if (has_dest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->dest(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Element::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required .teamstyle16.communicate.Position pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional .teamstyle16.communicate.Element.Size size = 4;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->size());
    }

    // required bool visible = 5;
    if (has_visible()) {
      total_size += 1 + 1;
    }

    // optional int32 team = 6 [default = 2];
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team());
    }

    // optional int32 health = 7;
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health());
    }

    // optional int32 fuel = 8;
    if (has_fuel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fuel());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 ammo = 9;
    if (has_ammo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ammo());
    }

    // optional int32 metal = 10;
    if (has_metal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->metal());
    }

    // optional .teamstyle16.communicate.Position dest = 11;
    if (has_dest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dest());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Element::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Element* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Element*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Element::MergeFrom(const Element& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pos()) {
      mutable_pos()->::teamstyle16::communicate::Position::MergeFrom(from.pos());
    }
    if (from.has_size()) {
      mutable_size()->::teamstyle16::communicate::Element_Size::MergeFrom(from.size());
    }
    if (from.has_visible()) {
      set_visible(from.visible());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_health()) {
      set_health(from.health());
    }
    if (from.has_fuel()) {
      set_fuel(from.fuel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ammo()) {
      set_ammo(from.ammo());
    }
    if (from.has_metal()) {
      set_metal(from.metal());
    }
    if (from.has_dest()) {
      mutable_dest()->::teamstyle16::communicate::Position::MergeFrom(from.dest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Element::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Element::CopyFrom(const Element& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Element::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  if (has_size()) {
    if (!this->size().IsInitialized()) return false;
  }
  if (has_dest()) {
    if (!this->dest().IsInitialized()) return false;
  }
  return true;
}

void Element::Swap(Element* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(type_, other->type_);
    std::swap(pos_, other->pos_);
    std::swap(size_, other->size_);
    std::swap(visible_, other->visible_);
    std::swap(team_, other->team_);
    std::swap(health_, other->health_);
    std::swap(fuel_, other->fuel_);
    std::swap(ammo_, other->ammo_);
    std::swap(metal_, other->metal_);
    std::swap(dest_, other->dest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Element::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Element_descriptor_;
  metadata.reflection = Element_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map::kXMaxFieldNumber;
const int Map::kYMaxFieldNumber;
const int Map::kTerrainFieldNumber;
#endif  // !_MSC_VER

Map::Map()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map::InitAsDefaultInstance() {
}

Map::Map(const Map& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map::SharedCtor() {
  _cached_size_ = 0;
  x_max_ = 0;
  y_max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map::~Map() {
  SharedDtor();
}

void Map::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_descriptor_;
}

const Map& Map::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communicate_2eproto();
  return *default_instance_;
}

Map* Map::default_instance_ = NULL;

Map* Map::New() const {
  return new Map;
}

void Map::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_max_ = 0;
    y_max_ = 0;
  }
  terrain_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x_max = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_max_)));
          set_has_x_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y_max;
        break;
      }

      // required int32 y_max = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_max_)));
          set_has_y_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_terrain;
        break;
      }

      // repeated int32 terrain = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_terrain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_terrain())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_terrain())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_terrain;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x_max = 1;
  if (has_x_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x_max(), output);
  }

  // required int32 y_max = 2;
  if (has_y_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y_max(), output);
  }

  // repeated int32 terrain = 3;
  for (int i = 0; i < this->terrain_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->terrain(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 x_max = 1;
  if (has_x_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x_max(), target);
  }

  // required int32 y_max = 2;
  if (has_y_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y_max(), target);
  }

  // repeated int32 terrain = 3;
  for (int i = 0; i < this->terrain_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->terrain(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x_max = 1;
    if (has_x_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x_max());
    }

    // required int32 y_max = 2;
    if (has_y_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y_max());
    }

  }
  // repeated int32 terrain = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->terrain_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->terrain(i));
    }
    total_size += 1 * this->terrain_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map::MergeFrom(const Map& from) {
  GOOGLE_CHECK_NE(&from, this);
  terrain_.MergeFrom(from.terrain_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x_max()) {
      set_x_max(from.x_max());
    }
    if (from.has_y_max()) {
      set_y_max(from.y_max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map::CopyFrom(const Map& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Map::Swap(Map* other) {
  if (other != this) {
    std::swap(x_max_, other->x_max_);
    std::swap(y_max_, other->y_max_);
    terrain_.Swap(&other->terrain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_descriptor_;
  metadata.reflection = Map_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StableInfo::kMapFieldNumber;
const int StableInfo::kTeamNumFieldNumber;
const int StableInfo::kWeatherFieldNumber;
const int StableInfo::kPopulationLimitFieldNumber;
const int StableInfo::kRoundLimitFieldNumber;
const int StableInfo::kTimePerRoundFieldNumber;
#endif  // !_MSC_VER

StableInfo::StableInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StableInfo::InitAsDefaultInstance() {
  map_ = const_cast< ::teamstyle16::communicate::Map*>(&::teamstyle16::communicate::Map::default_instance());
}

StableInfo::StableInfo(const StableInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StableInfo::SharedCtor() {
  _cached_size_ = 0;
  map_ = NULL;
  team_num_ = 0;
  weather_ = 0;
  population_limit_ = 0;
  round_limit_ = 0;
  time_per_round_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StableInfo::~StableInfo() {
  SharedDtor();
}

void StableInfo::SharedDtor() {
  if (this != default_instance_) {
    delete map_;
  }
}

void StableInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StableInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StableInfo_descriptor_;
}

const StableInfo& StableInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communicate_2eproto();
  return *default_instance_;
}

StableInfo* StableInfo::default_instance_ = NULL;

StableInfo* StableInfo::New() const {
  return new StableInfo;
}

void StableInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_map()) {
      if (map_ != NULL) map_->::teamstyle16::communicate::Map::Clear();
    }
    team_num_ = 0;
    weather_ = 0;
    population_limit_ = 0;
    round_limit_ = 0;
    time_per_round_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StableInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .teamstyle16.communicate.Map map = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_num;
        break;
      }

      // required int32 team_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_num_)));
          set_has_team_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_weather;
        break;
      }

      // optional int32 weather = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weather:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weather_)));
          set_has_weather();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_population_limit;
        break;
      }

      // optional int32 population_limit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_population_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &population_limit_)));
          set_has_population_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_round_limit;
        break;
      }

      // optional int32 round_limit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_limit_)));
          set_has_round_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_time_per_round;
        break;
      }

      // optional float time_per_round = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_time_per_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_per_round_)));
          set_has_time_per_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StableInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .teamstyle16.communicate.Map map = 1;
  if (has_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->map(), output);
  }

  // required int32 team_num = 2;
  if (has_team_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->team_num(), output);
  }

  // optional int32 weather = 3;
  if (has_weather()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->weather(), output);
  }

  // optional int32 population_limit = 4;
  if (has_population_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->population_limit(), output);
  }

  // optional int32 round_limit = 5;
  if (has_round_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->round_limit(), output);
  }

  // optional float time_per_round = 6;
  if (has_time_per_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->time_per_round(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StableInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .teamstyle16.communicate.Map map = 1;
  if (has_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->map(), target);
  }

  // required int32 team_num = 2;
  if (has_team_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->team_num(), target);
  }

  // optional int32 weather = 3;
  if (has_weather()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->weather(), target);
  }

  // optional int32 population_limit = 4;
  if (has_population_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->population_limit(), target);
  }

  // optional int32 round_limit = 5;
  if (has_round_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->round_limit(), target);
  }

  // optional float time_per_round = 6;
  if (has_time_per_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->time_per_round(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StableInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .teamstyle16.communicate.Map map = 1;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->map());
    }

    // required int32 team_num = 2;
    if (has_team_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_num());
    }

    // optional int32 weather = 3;
    if (has_weather()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weather());
    }

    // optional int32 population_limit = 4;
    if (has_population_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->population_limit());
    }

    // optional int32 round_limit = 5;
    if (has_round_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round_limit());
    }

    // optional float time_per_round = 6;
    if (has_time_per_round()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StableInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StableInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StableInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StableInfo::MergeFrom(const StableInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map()) {
      mutable_map()->::teamstyle16::communicate::Map::MergeFrom(from.map());
    }
    if (from.has_team_num()) {
      set_team_num(from.team_num());
    }
    if (from.has_weather()) {
      set_weather(from.weather());
    }
    if (from.has_population_limit()) {
      set_population_limit(from.population_limit());
    }
    if (from.has_round_limit()) {
      set_round_limit(from.round_limit());
    }
    if (from.has_time_per_round()) {
      set_time_per_round(from.time_per_round());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StableInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StableInfo::CopyFrom(const StableInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StableInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_map()) {
    if (!this->map().IsInitialized()) return false;
  }
  return true;
}

void StableInfo::Swap(StableInfo* other) {
  if (other != this) {
    std::swap(map_, other->map_);
    std::swap(team_num_, other->team_num_);
    std::swap(weather_, other->weather_);
    std::swap(population_limit_, other->population_limit_);
    std::swap(round_limit_, other->round_limit_);
    std::swap(time_per_round_, other->time_per_round_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StableInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StableInfo_descriptor_;
  metadata.reflection = StableInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoundInfo_ProductionEntry::kTypeFieldNumber;
const int RoundInfo_ProductionEntry::kRoundLeftFieldNumber;
#endif  // !_MSC_VER

RoundInfo_ProductionEntry::RoundInfo_ProductionEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoundInfo_ProductionEntry::InitAsDefaultInstance() {
}

RoundInfo_ProductionEntry::RoundInfo_ProductionEntry(const RoundInfo_ProductionEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoundInfo_ProductionEntry::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  round_left_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoundInfo_ProductionEntry::~RoundInfo_ProductionEntry() {
  SharedDtor();
}

void RoundInfo_ProductionEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoundInfo_ProductionEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoundInfo_ProductionEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoundInfo_ProductionEntry_descriptor_;
}

const RoundInfo_ProductionEntry& RoundInfo_ProductionEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communicate_2eproto();
  return *default_instance_;
}

RoundInfo_ProductionEntry* RoundInfo_ProductionEntry::default_instance_ = NULL;

RoundInfo_ProductionEntry* RoundInfo_ProductionEntry::New() const {
  return new RoundInfo_ProductionEntry;
}

void RoundInfo_ProductionEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    round_left_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoundInfo_ProductionEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_round_left;
        break;
      }

      // required int32 round_left = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_left_)));
          set_has_round_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoundInfo_ProductionEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 round_left = 2;
  if (has_round_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->round_left(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoundInfo_ProductionEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 round_left = 2;
  if (has_round_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->round_left(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoundInfo_ProductionEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 round_left = 2;
    if (has_round_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round_left());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoundInfo_ProductionEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoundInfo_ProductionEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoundInfo_ProductionEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoundInfo_ProductionEntry::MergeFrom(const RoundInfo_ProductionEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_round_left()) {
      set_round_left(from.round_left());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoundInfo_ProductionEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoundInfo_ProductionEntry::CopyFrom(const RoundInfo_ProductionEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoundInfo_ProductionEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RoundInfo_ProductionEntry::Swap(RoundInfo_ProductionEntry* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(round_left_, other->round_left_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoundInfo_ProductionEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoundInfo_ProductionEntry_descriptor_;
  metadata.reflection = RoundInfo_ProductionEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RoundInfo::kRoundFieldNumber;
const int RoundInfo::kScoreFieldNumber;
const int RoundInfo::kPopulationFieldNumber;
const int RoundInfo::kElementFieldNumber;
const int RoundInfo::kProductionListFieldNumber;
#endif  // !_MSC_VER

RoundInfo::RoundInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoundInfo::InitAsDefaultInstance() {
}

RoundInfo::RoundInfo(const RoundInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoundInfo::SharedCtor() {
  _cached_size_ = 0;
  round_ = 0;
  population_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoundInfo::~RoundInfo() {
  SharedDtor();
}

void RoundInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoundInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoundInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoundInfo_descriptor_;
}

const RoundInfo& RoundInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communicate_2eproto();
  return *default_instance_;
}

RoundInfo* RoundInfo::default_instance_ = NULL;

RoundInfo* RoundInfo::New() const {
  return new RoundInfo;
}

void RoundInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    round_ = 0;
    population_ = 0;
  }
  score_.Clear();
  element_.Clear();
  production_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoundInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 round = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // repeated int32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        if (input->ExpectTag(24)) goto parse_population;
        break;
      }

      // optional int32 population = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_population:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &population_)));
          set_has_population();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_element;
        break;
      }

      // repeated .teamstyle16.communicate.Element element = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_element()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_element;
        if (input->ExpectTag(42)) goto parse_production_list;
        break;
      }

      // repeated .teamstyle16.communicate.RoundInfo.ProductionEntry production_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_production_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_production_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_production_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoundInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 round = 1;
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->round(), output);
  }

  // repeated int32 score = 2;
  for (int i = 0; i < this->score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->score(i), output);
  }

  // optional int32 population = 3;
  if (has_population()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->population(), output);
  }

  // repeated .teamstyle16.communicate.Element element = 4;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->element(i), output);
  }

  // repeated .teamstyle16.communicate.RoundInfo.ProductionEntry production_list = 5;
  for (int i = 0; i < this->production_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->production_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoundInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 round = 1;
  if (has_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->round(), target);
  }

  // repeated int32 score = 2;
  for (int i = 0; i < this->score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->score(i), target);
  }

  // optional int32 population = 3;
  if (has_population()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->population(), target);
  }

  // repeated .teamstyle16.communicate.Element element = 4;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->element(i), target);
  }

  // repeated .teamstyle16.communicate.RoundInfo.ProductionEntry production_list = 5;
  for (int i = 0; i < this->production_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->production_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoundInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 round = 1;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round());
    }

    // optional int32 population = 3;
    if (has_population()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->population());
    }

  }
  // repeated int32 score = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->score(i));
    }
    total_size += 1 * this->score_size() + data_size;
  }

  // repeated .teamstyle16.communicate.Element element = 4;
  total_size += 1 * this->element_size();
  for (int i = 0; i < this->element_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->element(i));
  }

  // repeated .teamstyle16.communicate.RoundInfo.ProductionEntry production_list = 5;
  total_size += 1 * this->production_list_size();
  for (int i = 0; i < this->production_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->production_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoundInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoundInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoundInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoundInfo::MergeFrom(const RoundInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  score_.MergeFrom(from.score_);
  element_.MergeFrom(from.element_);
  production_list_.MergeFrom(from.production_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_round()) {
      set_round(from.round());
    }
    if (from.has_population()) {
      set_population(from.population());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoundInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoundInfo::CopyFrom(const RoundInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoundInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < element_size(); i++) {
    if (!this->element(i).IsInitialized()) return false;
  }
  for (int i = 0; i < production_list_size(); i++) {
    if (!this->production_list(i).IsInitialized()) return false;
  }
  return true;
}

void RoundInfo::Swap(RoundInfo* other) {
  if (other != this) {
    std::swap(round_, other->round_);
    score_.Swap(&other->score_);
    std::swap(population_, other->population_);
    element_.Swap(&other->element_);
    production_list_.Swap(&other->production_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoundInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoundInfo_descriptor_;
  metadata.reflection = RoundInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace communicate
}  // namespace teamstyle16

// @@protoc_insertion_point(global_scope)
